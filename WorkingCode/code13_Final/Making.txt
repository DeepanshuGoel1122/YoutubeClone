npx create-react-app youtube_clone

after editing src folder
npm install react-bootstrap bootstrap node-sass react-icons

create components folder 

style header
style sidebar
style CategoriesBar
style video

---------------------------------------------------------------

now make login page

now its time for routing
npm install react-router-dom

make routes

now setup the firebase > goto console > add project > continue

npm i firebase 
create new file firebase.js , add configuration to it.

now come to Redux part
Redux (
    it it it will have a single store, and all the data which is shared among all the components will be stored in tht store.
    we can refer a store as a global state.
    we can read data from the data easily, but if we want to modify data in the global state, you have to use dispatch function.

    we want to add data in the global state, and the data is come from public API,
    in react component we need go create an action creator, { actionCreator returns a function and action returns an object, and function will create an action}

    in action creator we have middleware function, it will call the API, will get the data and prepare the data and then it will create the action object.

    Action have 2 values, type and payload.
    action will hit the reducer, Reducer is a function, it will take the previous state and current action.based on that action type it will return a new state.and the store will be updated with the new state.
    and then from that store, components can read the data. 

    useSelector() hook is used to get the data from the store 
    useDispatch() hook is used to get the dispatch function.
)

npm install redux react-redux redux-thunk redux-devtools-extension

create redux folder
create file store.js

connect store in index.js
now you should see our initial states in chrome redux extension
create folder actions and reducers in redux folder.
create file actionType.js

now for authentication, goto firebase > authentication > enable google

crate file firebase.js

now we need to create a action creator

import that login action in LoginScreen

now we will able to fetch info of user on click of signin

create file auth.reducer.js


after some code in store.js, auth.reducer.js, auth.action.js now we are able to se states LOGIN_REQUEST, LOGIN_SUCCESS, LOAD_PROFILE.

now in LoginScreen, we use useSelector hook, and useEffect to se if user accessToken is not null, then redirect user to homepage

now if after login we have accessToken, then we will redirect to homepage '/'



-----------------------------------------------------------------------------------------------------------------------------------------------------



now the problem is if we search for any route like //search or any thing it will work,
but we have to protect route, without login we don't want anyone to use the app.
(if user is not authenticated , we will no give them route)


in Main.js some code, now only authenticated user can go to route

now the problem is when we refresh the page our redux state is going back to initial state, we will have to store that.

we parse the access token and user in the BrowserStorage.
we will use sessionStorage > in auth.action.js
replace Initial state of accesstoken from null to session storage get item

now if we refresh the page, it will be logged in 


now we will implement Logout functionality
work in auth.action.ja and auth.reduce.js 
on click in sidebar.js logout button

Authentication Part is Now Completed


----------------------------------------------------------------------------------------------------------



now we will use the api key and render the popular youtube videos on the homescreen

goto (https://console.cloud.google.com/cloud-resource-manager)
here you will see your firebase project name, click on 3 dot > settings > API and service > Library > search for Youtube Data Api V3 > enable
Api and services > credentials > Api key auto created by firebase > copy key 

create .env file  put api here 

now goto (https://developers.google.com/youtube/v3/guides/auth/installed-apps)
copy (https://www.googleapis.com/auth/youtube.force-ssl) by this we can See, edit, and permanently delete your YouTube videos, ratings, comments and captions




npm i axios numeral moment

axios for dealing with http requests
numeral to deal with numbers
moment to deal with dates


goto (https://developers.google.com/youtube/v3/docs)


create new file videos.action.js

create new file api.js ,
we got the data on console related too videos 

create new file video.reducer.js

now in the homeScreen.jsx pass the video in the video component and key
now in video.jsx do some change to display data
videos are now displaying from api by get_video_details

now use moment library to display duration
now use numeral library to display views

now we are able to fetch videos and there tile, views duration, channel icon name etc details.




--------------------------------------------------------------------------------------------------------------





now we will work for slider categories bar

in videos.action.js, make getVideosBYCategory, work in video.reducer.js and video.jsx our categories bar is working




-----------------------------------------------------------------------------------------------------------------


now we will work on pagination, loading skeleton

npm i react-infinite-scroll-component react-loading-skeleton react-lazy-load-image-component

in homeScreen.jsx, video.reducer,video.action



homepage pagination complete, spinner not showing


------------------------------------------------------------------------------------------


now category bar pagination is also working.


---------------------------------------------------------------------------------------------



Now we will implement skeleton component 

make new folder skeletons 
create new file SkeletonVideo.js 

now we will implement lazy load of images



now we  will implement on the watchScreen.

make folder watchscreen > WatchScreen.jsx

create folder videoMetaData > VideoMetaData.jsx

create folder comments > Comments.jsx

create folder videoHorizontal > VideoHorizontal.jsx

for video description show more functionality
npm install react-show-more-text 

now come to comment section
create folder comment > Comment.jsx

comment section is completed, now come to videoHorizontal

now watch screen section UI is completed


------------------------------------------------------------------------------------------




now we implement when we clink on any video on homeScreen we will redirect to watch screen

in video.jsx

video title description and redirect part is completed 


----------------------------------------------------------------------------------------



now we will implement channel name, icon, subscription status

create new file channel.action.js
create new file channel.reducer.js

{first create action type, them channel.action, them channel.reducer, now import channel details in store, now create action creator in videometadata}




till now we are able to fetch subscription status 



------------------------------------------------------------------------


now we come to comment part, comments of the video and do comment on the video


now we will come to recommended video section

done till watch screen including recommended video section 



-------------------------------------------------------------------------


Till Search functionality completed


-------------------------------------------------------------------------

now we we implement when we click on subscriptions button , our or subscribed channels show

create new file SubscriptionsScreen.jsx




we will use helmet to dynamically change title
npm install react-helmet-async




{
For react-router-dom v6, simply replace Redirect with Navigate
In react-router-dom v6 useHistory() is replaced by useNavigate().
import firebase from 'firebase/app'; replaced with import 'firebase/compat/auth';
clone1-yt
project-23640985264
}
